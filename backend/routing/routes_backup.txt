const express = require("express");
const router = new express.Router();
const User = require("../models/user");
const auth = require('../middlewares/auth')
//Defining our Routes
///CRUD:
//ROUTES DEFINITION FOR USER LOGIN/LOGOUT
router.post("/api/users/login", async (req, res) => {
  try {
    // console.log(req.body);
    const user = await User.findByCredentials(
      req.body.email,
      req.body.password
    );
    const authToken = await user.generateAuthToken();
    // console.log( user );
    res.send({ user ,authToken });
  } catch (error) {
    res.status(400).send({ error: error.message });
  }
});

//logout
router.post('/api/users/logout',auth,async (req,res)=>{
  // console.log(req.user.token ); ///the stored token 
  // console.log(req.user.authToken);
  try{
    req.user.tokens = req.user.tokens.filter((authToken)=>{
      return authToken.authToken !== req.token
    })
    await req.user.save()

    res.send()
  } catch(e){
    res.status(500).send()
  }
})

//logout all sessions
router.post('/api/users/logoutAll', auth, async (req, res) => {
  try {
      req.user.tokens = []
      await req.user.save()
      res.send()
  } catch (e) {
      res.status(500).send()
  }
})

// POST method to CREATE
router.post("/api/users", async (req, res) => {
  const user = new User(req.body);
  console.log(user);
  try {
    await user.save();
    const authToken = await user.generateAuthToken();
    res.status(201).send({ user, authToken });
  } catch (e) {
    res.status(400).send(e);
  }
});

// GET method to READ/FETCH
router.get("/api/users/all", async (req, res) => {
  try {
    const user = await User.find({});
    res.status(200).send({ user });
  } catch (e) {
    res.status(500).send();
  }
});

router.get('/api/users/profile',auth, async (req, res) => {
  // console.log("router.get('/users/me')");
  res.send(req.user)
})

// GET method to READ/FETCH BY SPECIFIC ID
router.get("/api/users/:id", auth,async (req, res) => {
  const _id = req.params.id;
  // console.log(req.params.id);
  try {
    const user = await User.findById(_id);
    if (!user) {
      return res.status(404).send("No User Found");
    }
    res.send(user);
  } catch (e) {
    res.status(500).send(e);
  }
});

// PATCH method to UPDATE 
//will keep this for admin
router.patch("/api/users/:id", async (req, res) => {
  const updates = Object.keys(req.body);
  const allowedUpdates = ["email", "password"];
  const isValidOperation = updates.every((update) =>
    allowedUpdates.includes(update)
  );

  if (!isValidOperation) {
    return res.status(400).send({ error: "Invalid updates!" });
  }
  const _id = req.params.id;

  try {
    const user = await User.findById(_id);
    updates.forEach((update) => (user[update] = req.body[update]));
    await user.save();
    if (!user) {
      return res.status(404).send("No User Found");
    }
    res.send(user);
    console.log("User details Updated");
  } catch (e) {
    res.status(500).send(e);
  }
});

// PATCH method to UPDATE 
//will keep this for user front

router.patch("/api/users/profile/update",auth, async (req, res) => {
  const updates = Object.keys(req.body);
  const allowedUpdates = ["email", "password"];
  const isValidOperation = updates.every((update) =>
    allowedUpdates.includes(update)
  );

  if (!isValidOperation) {
    return res.status(400).send({ error: "Invalid updates!" });
  }
  // const _id = req.params.id;

  try {
    // console.log('try block')
    // const user = await User.findById(_id);
    updates.forEach((update) => req.user[update] = req.body[update])
    await req.user.save();
    res.send(req.user);
    console.log("User details Updated");
  } catch (e) {
    res.status(400).send(e);
  }
});
// /api/user/
// DELETE method to DELETE
router.delete("/api/users/:id", async (req, res) => {
  try {
    const user = await User.findByIdAndDelete(req.params.id);
    if (!user) {
      return res.status(404).send();
    }
    res.send(user);
  } catch (e) {
    res.status(201).send();
  }
});

//Exporting for reuse
module.exports = router;
